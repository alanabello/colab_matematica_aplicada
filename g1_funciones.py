# -*- coding: utf-8 -*-
"""G1_Funciones.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lKJgK3ags7CLJgbYZtk7OOKHxbgEh6ws

# Problema 1

Una red transmite datos a $100$ megabits por segundo. Crea una función utilizando *Python* que permita calcular la cantidad de datos transmitidos en una cierta cantidad de tiempo (en segundos). Luego utiliza la función y calcula cuántos datos se transmiten en:

* $45$ segundos
* $1,5$ minutos
* $1$ hora
"""

#funcion
def C(t):
    return 100*t
print(f"a los 45 segundos se transmiten {C(45)} megabits")
print(f"a los 1.5 minutos se transmiten {C(90)} megabits")
print(f" en 1 hora se transmiten {C(3600)} megabits")

"""# Problema 2

Utilizando la función definida en el problema $1$, genera un listado que muestre los datos transmitidos para tiempos desde $0$ hasta $1.000$ segundos con incrementos de $100$ segundos.
"""

def tabla():
    for i in range(0,1100,100):
        print(f"{i} segundos | {C(i)} megabits")
tabla()

"""# Problema 3

La **latencia** de una red corresponde al tiempo que tarda un paquete de datos en viajar desde el punto de origen al destino. En otras palabras, es el tiempo que transcurre desde que se envía una solicitud de un dispositivo hasta que se recibe una respuesta del servidor u otro dispositivo.

La latencia puede verse afectada por la velocidad de transmisión de los datos a través de los cables o conexiones inalámbricas, la distancia física entre los dispositivos, el tiempo que tarda un computador en procesar o reenviar los datos, etc.

En redes de comunicación, como las videoconferencias, juegos en línea y transmisión de datos en tiempo real, es deseable una baja latencia, de lo contrario pueden existir retrasos en la comunicación y afectar negativamente la experiencia del usuario.

Según el contexto mencionado, crea una función en *Python* que permita calcular la **latencia real** de una red dada una latencia estimada. Suponga que la latencia real es un $20\%$ mayor a la latencia estimada.

Calcule la latencia real para una latencia estimada de:

a)   $200$ milisegundos.

b)   $149$ milisegundos.

c)   $74$ milisegundos.
"""

# x: la latencia estimada
# f(x): latencia real

def f(x):
    return 1.2*x
print(f"si la latencia estimada es 200 milisegundos, la latencia real es {f(200)}")
print(f"si la latencia estimada es 149 milisegundos, la latencia real es {f(149)}")
print(f"si la latencia estimada es 74 milisegundos, la latencia real es {f(74)}")

"""# Problema 4

Como parte de un proyecto de mejora, en el año $2021$ se instaló un cable de fibra óptica que une España con EEUU. El cable tiene un largo de $6.600$ $km$ y fue colocado por un barco a una velocidad de $1,85$ $km/h$.



1.   Determine la forma algebraica de la función que permite determinar el largo del cable instalado (en km) a partir del tiempo transcurrido (en horas). Utilice la instrucción *def* para definir la función en *Python*.
2.   Defina variable dependiente e independiente, indicando unidad de medida.
3.   Determine el dominio contextualizado de la función.
4.   Grafique la función utilizando la biblioteca *Matplotlib* considerando el dominio contextualizado.
5.   ¿Cuántos metros de cable se instalaron al transcurrir $148$ horas? ¿Y transcurridas $2.300$ horas?
6.   Si se han instalado $3.480$ kilometros de cable, ¿cuántas horas llevan de trabajo?
7.   ¿Cuánto tiempo transcurrió para que se completara la obra?
"""

#1) x=tiempo transcurrido (hrs)
# C(T) largo del cable (km)
#  | C | C(T) |
#  | 0 | 0    |
#  | 1 | 1.85 |
#  | 2 | 3.7  |
#  | 3 | 5.55 |

# 2) variables
# V Independiente = T: tiempo transcurrido (hrs)
#V Dependiente = C(T): largo del cable de fibra optica (km))

#dominio de la funcion
import numpy as np
import matplotlib.pyplot as plt

# Función que calcula el largo de cable instalado
def cable_instalado(t):
    """
    Devuelve la cantidad de cable instalado (en km) después de t horas.
    """
    return 1.85 * t

# Dominio contextualizado
t_total = 6600 / 1.85  # horas necesarias para instalar todo el cable
t = np.linspace(0, t_total, 200)  # 200 puntos para el gráfico

# Gráfico de la instalación
plt.plot(t, cable_instalado(t), label="Cable instalado")
plt.axhline(6600, color="red", linestyle="--", label="Cable total 6600 km")
plt.xlabel("Tiempo transcurrido (horas)")
plt.ylabel("Cable instalado (km)")
plt.title("Instalación de cable fibra óptica España - EEUU")
plt.grid(True)
plt.legend()
plt.show()

# Cable instalado en tiempos específicos
cable_148 = cable_instalado(148)
cable_2300 = cable_instalado(2300)
print("Cable instalado a las 148 h:", round(cable_148,2), "km =", round(cable_148*1000,2), "m")
print("Cable instalado a las 2300 h:", round(cable_2300,2), "km =", round(cable_2300*1000,2), "m")

# Tiempo requerido para instalar 3480 km
t_3480 = 3480 / 1.85
print("Tiempo para instalar 3480 km:", round(t_3480,2), "horas")

# Tiempo total para completar la obra
print("Tiempo total para completar la obra:", round(t_total,2), "horas")

"""# Problema 5

Un turista ha llegado a Santiago y desea conocer algunos lugares de la ciudad. Ha decidido visitar el Palacio de la Moneda y desde ahí trasladarse al centro comercial "Costanera Center", utilizando algún medio de transporte que ofrece la ciudad.

Si se traslada en metro deberá abordar en estación La Moneda y bajar en la estación Tobalaba ($9$ estaciones). La función $f(t)$ permite calcular la distancia recorrida utilizando el metro (en kilómetros) transcurridos $t$ minutos.

$$f(t) = 0,4t$$

Si se traslada en bus, el turista podrá observar la ciudad y otros atractivos en su viaje. La función $g(t)$ permite calcular la distancia recorrida en bus (en kilómetros) transcurridos $t$ minutos.

$$g(t) = 0,3t$$

Según la información anterior:

1. Grafique ambas funciones, indicando el nombre de cada eje junto con su unidad de medida. Para realizar el gráfico utilice la biblioteca *Matplotlib*.
2.  Si se sabe que el metro se demora $1,2$ minutos en llegar desde una estación a otra y espera $30$ segundos en cada estación, indique el dominio contextualizado para $f(t)$.
3. Mediante análisis gráfico, indique cuál medio de transporte es más conveniente en términos de tiempo, para el turista. Justifique.
4.  Si se sabe que desde estación La Moneda hasta Tobalaba son aproximadamente $6$ kilómetros ¿cuántos tiempo tardará el turista en llegar a su destino con cada una de las opciones?
"""



"""# Problema 6

La temperatura de un servidor (en °C) puede ser modelada mediante la función

$$T(t) = -0,5 t^{2} + 3 t + 20$$

donde $t$ corresponde al tiempo transcurrido (en horas) en un día laboral. Considere que la jornada laboral comienza a las 08:00 horas y termina a las 17:00 horas.

1.  Defina variable dependiente e independiente, indicando unidad de medida.
2.  Determine el dominio contextualizado del problema.
3.  Grafique la función utilizando *Python*.
4.  Mediante un análisis gráfico, estime cuándo el servidor alcanza la máxima temperatura y calcule cuánto es.
5.  Determine la temperatura del servidor a las 13:00 horas y al finalizar la jornada laboral.
"""

import numpy as np
import matplotlib.pyplot as plt

# Definir funciones
def metro(t):
    return 0.4 * t

def bus(t):
    return 0.3 * t

# Dominio contextualizado
t_metro = np.linspace(0, 15.3, 200)  # Metro
t_bus = np.linspace(0, 20, 200)      # Bus

# Graficar
plt.plot(t_metro, metro(t_metro), label="Metro")
plt.plot(t_bus, bus(t_bus), label="Bus")
plt.xlabel("Tiempo transcurrido (minutos)")
plt.ylabel("Distancia recorrida (km)")
plt.title("Distancia recorrida: Metro vs Bus")
plt.grid(True)
plt.legend()
plt.show()

# 3️⃣ Tiempo para recorrer 6 km
distancia_total = 6
tiempo_metro = distancia_total / 0.4
tiempo_bus = distancia_total / 0.3

print("Tiempo en metro para 6 km:", round(tiempo_metro,2), "minutos")
print("Tiempo en bus para 6 km:", round(tiempo_bus,2), "minutos")

"""# Problema 7

El número de usuarios de una red social se puede modelar mediante la función:

$$U(t) = \frac{1.000}{1+9e^{-0.5t}}$$

donde $t$ corresponde al tiempo transcurrido en meses.

1.  Defina variable dependiente e independiente, indicando unidad de medida.
2.  Determine la cantidad de usuarios transcurridos $12$ meses.
3.  Grafique la función, utilizando la librería *Matplotlib*, para los primeros dos años de funcionamiento.
4.  ¿Cuánto tiempo debe pasar para que la red social llegue a $800$ usuarios?
"""

import numpy as np
import matplotlib.pyplot as plt

# Función de usuarios
def U(t):
    return 100 + 9 * np.exp(-0.5 * t)

# Cantidad de usuarios después de 12 meses
usuarios_12 = U(12)
print("Usuarios después de 12 meses:", round(usuarios_12,2))

# Graficar la función para los primeros 24 meses
t = np.linspace(0, 24, 200)
plt.plot(t, U(t), label="Usuarios en la red social")
plt.xlabel("Tiempo (meses)")
plt.ylabel("Número de usuarios")
plt.title("Crecimiento de usuarios en la red social")
plt.grid(True)
plt.legend()
plt.show()

# Intento de alcanzar 800 usuarios
try:
    import math
    t_objetivo = -math.log((800-100)/9)/0.5
    print("Tiempo necesario para 800 usuarios:", round(t_objetivo,2), "meses")
except:
    print("No es posible alcanzar 800 usuarios con esta función.")

"""# Problema 8

El tiempo de ejecución de un algoritmo de ordenación (en segundos) se puede modelar mediante la función:

$$A(n) = 0,01n^{2} + 0,5n + 2$$

donde $n$ corresponde a la cantidad de elementos a ordenar. El algoritmo funciona desde las 23:00 horas hasta las 06:00 horas y debe ordenar $1.562$ elementos.

1. Defina variable dependiente e independiente, indicando unidad de medida.
2. Determine el dominio contextualizado de la función.
3. Determine el tiempo de ejecución para ordenar $1.200$ elementos.
4. Grafique, utilizando la biblioteca *Matplotlib*, la función $A(n)$.
5. ¿Cuántos elementos ordena luego de $6$ horas de funcionamiento?
"""

import numpy as np
import matplotlib.pyplot as plt

# Definir función de tiempo de ejecución
def A(n):
    return 0.01*n**2 + 0.5*n + 2

# Dominio contextualizado
n_max = 1562
n = np.linspace(0, n_max, 200)

# Tiempo para 1,200 elementos
tiempo_1200 = A(1200)
print("Tiempo para ordenar 1,200 elementos:", round(tiempo_1200,2), "segundos")

# Graficar función
plt.plot(n, A(n), label="Tiempo de ejecución")
plt.xlabel("Cantidad de elementos")
plt.ylabel("Tiempo de ejecución (segundos)")
plt.title("Tiempo de ejecución del algoritmo de ordenación")
plt.grid(True)
plt.legend()
plt.show()

# Cuántos elementos se pueden ordenar en 6 horas
# A(n) = 21600 segundos
# 0.01 n^2 + 0.5 n + 2 - 21600 = 0
coef = [0.01, 0.5, 2-21600]
raices = np.roots(coef)
# Tomar la raíz positiva
n_6h = max(raices)
print("Elementos que se pueden ordenar en 6 horas:", int(n_6h))

"""# Problema 9

El consumo de energía (en $kWh$) de un *Data Center* puede ser modelado por la función:

 $$E(t) = 50\cdot \log(t + 1) + 200$$

donde $t$ corresponde al tiempo (en horas) desde el inicio del monitoreo.

1. Defina variable dependiente e independiente, indicando unidad de medida.
2. Determine el consumo de energía del *Data Center* después de $5$ horas.
3. ¿Luego de cuántas horas el consumo será de $350$ kWh?
4. Grafique, utilizando la biblioteca *Matplotlib*, la función $E(t)$.
"""

import numpy as np
import matplotlib.pyplot as plt

# Definir función de consumo de energía
def E(t):
    return 50 * np.log(t+1) + 200  # log natural

# Consumo después de 5 horas
consumo_5h = E(5)
print("Consumo después de 5 horas:", round(consumo_5h,2), "kWh")

# Tiempo para que el consumo sea 350 kWh
t_objetivo = np.exp((350-200)/50) - 1
print("Tiempo para llegar a 350 kWh:", round(t_objetivo,2), "horas")

# Graficar función
t = np.linspace(0, 10, 200)  # primeros 10 horas
plt.plot(t, E(t), label="Consumo de energía")
plt.axhline(350, color='red', linestyle='--', label="350 kWh")
plt.xlabel("Tiempo (horas)")
plt.ylabel("Consumo de energía (kWh)")
plt.title("Consumo de energía del Data Center")
plt.grid(True)
plt.legend()
plt.show()

"""# Problema 10

En gestión de proyectos, es crucial entender cómo se distribuye la carga de trabajo a lo largo del tiempo para planificar recursos, tiempo y esfuerzos de manera eficiente. Un fenómeno común es la disminución exponencial de la carga de trabajo, donde el esfuerzo requerido es mayor al inicio del proyecto y disminuye gradualmente a medida que se completan las tareas principales.

Esta disminución exponencial puede modelarse matemáticamente para predecir y gestionar el trabajo de manera efectiva.

<br>

Un estudio sobre gestión de proyectos sostiene que la carga de trabajo en un proyecto (en porcentaje) puede ser modelada por la función:

$$W(t) = 100e^{-0.1t}$$

donde $t$ corresponde al tiempo transcurrido (en semanas) desde el inicio del proyecto.

1. Defina variable dependiente e independiente, indicando unidad de medida.
2. Determine la carga de trabajo al inicio del proyecto.
3. ¿Cuál será la carga de trabajo luego de transcurridas $4$ semanas desde el inicio del proyecto?
4. Si el proyecto duró $12$ semanas, ¿es correcto afirmar que la carga de trabajo llegó al $20\%$?
5. ¿Cuántas semanas han pasado desde el inicio del proyecto para que la carga de trabajo sea de $55\%$?
6. Utilizando *Matplotlib*, grafique la función considerando un tiempo máximo de $12$ semanas.
"""

import numpy as np
import matplotlib.pyplot as plt

# Definir función de carga de trabajo
def W(t):
    return 100 * np.exp(-0.1*t)

# Carga de trabajo al inicio
inicio = W(0)
print("Carga de trabajo al inicio:", round(inicio,2), "%")

# Carga de trabajo después de 4 semanas
semana4 = W(4)
print("Carga de trabajo a las 4 semanas:", round(semana4,2), "%")

# Carga de trabajo al final del proyecto (12 semanas)
semana12 = W(12)
print("Carga de trabajo a las 12 semanas:", round(semana12,2), "%")

# Tiempo para que la carga sea 55%
t_55 = -np.log(55/100)/0.1
print("Semanas para que la carga sea 55%:", round(t_55,2), "semanas")

# Graficar función
t = np.linspace(0,12,200)
plt.plot(t, W(t), label="Carga de trabajo")
plt.axhline(55, color='red', linestyle='--', label="55% carga")
plt.xlabel("Tiempo (semanas)")
plt.ylabel("Carga de trabajo (%)")
plt.title("Disminución exponencial de la carga de trabajo")
plt.grid(True)
plt.legend()
plt.show()